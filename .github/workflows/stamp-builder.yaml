name: '2. Stamp Builder'

on:
  workflow_dispatch:

env:
  CLI_VERSION: 2.27.0

jobs:

  builder:
    name: Provision - Builder
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master

      - name: Azure Login
        uses: Azure/login@v1.1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}


      - name: Validate Template Resources
        uses: Azure/cli@1.0.4
        with:
          azcliversion: ${{ env.CLI_VERSION }}
          inlineScript: |
            PRINCIPAL_OID=$(az ad sp show --id $(az account show --query user.name -otsv) --query objectId -otsv)
            az deployment sub validate --name 'osdu-${{ secrets.RAND }}' --location ${{ secrets.AZURE_LOCATION }} --template-file $GITHUB_WORKSPACE/main.bicep \
              --parameter location=${{ secrets.AZURE_LOCATION }} \
              --parameter suffix=${{ secrets.RAND }} \
              --parameter azurePrincipalOID=$PRINCIPAL_OID

      - name: Deploy Template Resources
        uses: Azure/cli@1.0.4
        with:
          azcliversion: ${{ env.CLI_VERSION }}
          inlineScript: |
            PRINCIPAL_OID=$(az ad sp show --id $(az account show --query user.name -otsv) --query objectId -otsv)
            GROUP=$(az deployment sub create --name 'osdu-${{ secrets.RAND }}' --location ${{ secrets.AZURE_LOCATION }} --template-file $GITHUB_WORKSPACE/main.bicep \
              --parameter location=${{ secrets.AZURE_LOCATION }} \
              --parameter suffix=${{ secrets.RAND }} \
              --parameter azurePrincipalOID=$PRINCIPAL_OID --query properties.parameters.groupName.value -otsv)
            echo "RESOURCE_GROUP=$GROUP" >> $GITHUB_ENV

      - name: Save Resource Group as Secret
        uses: gliech/create-github-secret-action@v1
        with:
          name: BUILDER_GROUP
          value: ${{ env.RESOURCE_GROUP }}
          pa_token: ${{ secrets.GH_REPO_TOKEN }}

      - name: Save Secrets to Vault
        uses: Azure/cli@1.0.4
        with:
          azcliversion: ${{ env.CLI_VERSION }}
          inlineScript: |
            VAULT=$(az keyvault list --resource-group $RESOURCE_GROUP --query [].name -otsv)
            STORAGE=$(az storage account list --resource-group $RESOURCE_GROUP --query [].name -otsv)
            az keyvault secret set --vault-name $VAULT --name tenant-id --value $(az account show --query homeTenantId) -o none 2>/dev/null
            az keyvault secret set --vault-name $VAULT --name terraform-id --value $(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r ".clientId") -o none 2>/dev/null
            az keyvault secret set --vault-name $VAULT --name terraform-secret --value $(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r ".clientSecret") -o none 2>/dev/null
            az keyvault secret set --vault-name $VAULT --name terraform-oid --value $(az ad sp show --id $(az account show --query user.name -otsv) --query objectId -otsv) -o none 2>/dev/null
            az keyvault secret set --vault-name $VAULT --name client-id --value $(echo '${{ secrets.OSDU_CREDENTIALS }}' | jq -r ".clientId") -o none 2>/dev/null
            az keyvault secret set --vault-name $VAULT --name client-secret --value $(echo '${{ secrets.OSDU_CREDENTIALS }}' | jq -r ".clientSecret") -o none 2>/dev/null
            az keyvault secret set --vault-name $VAULT --name client-oid --value $(echo '${{ secrets.OSDU_CREDENTIAL_OID }}') -o none 2>/dev/null
            az keyvault secret set --vault-name $VAULT --name application-id --value $(echo '${{ secrets.OSDU_APPLICATION }}' | jq -r ".appId") -o none 2>/dev/null
            az keyvault secret set --vault-name $VAULT --name storage --value $STORAGE -o none 2>/dev/null
            az keyvault secret set --vault-name $VAULT --name storage-key --value $(az storage account keys list --account-name $STORAGE --resource-group $RESOURCE_GROUP --query '[0].value' --output tsv) -o none 2>/dev/null
            az keyvault secret set --vault-name $VAULT --name ssh-passphrase --value '${{ secrets.SSH_PASSPHRASE }}' -o none 2>/dev/null

      - name: Upload SSH Keys to Share
        uses: Azure/cli@1.0.4
        env:
          FILE_SHARE: ssh-keys
        with:
          azcliversion: ${{ env.CLI_VERSION }}
          inlineScript: |
            mkdir -p $FILE_SHARE
            echo '${{ secrets.SSH_PUBLIC_KEY }}' > $FILE_SHARE/azure-aks-node-ssh-key && chmod 600 $FILE_SHARE/azure-aks-node-ssh-key
            echo '${{ secrets.SSH_PRIVATE_KEY }}' > $FILE_SHARE/azure-aks-node-ssh-key.pub && chmod 644 $FILE_SHARE/azure-aks-node-ssh-key.pub
            STORAGE=$(az storage account list --resource-group $RESOURCE_GROUP --query [].name -otsv)
            STORAGE_KEY=$(az storage account keys list --account-name $STORAGE --resource-group $RESOURCE_GROUP --query '[0].value' -otsv)
            az storage file upload-batch --account-name $STORAGE --account-key $STORAGE_KEY --destination $FILE_SHARE --source $FILE_SHARE --pattern "**"
            rm -rf $FILE_SHARE

      - name: Upload Configuration to Share
        uses: Azure/cli@1.0.4
        env:
          FILE_SHARE: configuration
        with:
          azcliversion: ${{ env.CLI_VERSION }}
          inlineScript: |
            mkdir -p $FILE_SHARE
            wget https://community.opengroup.org/osdu/platform/deployment-and-operations/infra-azure-provisioning/-/raw/master/infra/templates/osdu-r3-mvp/central_resources/override.tfvars -O $FILE_SHARE/central.tfvars
            wget https://community.opengroup.org/osdu/platform/deployment-and-operations/infra-azure-provisioning/-/raw/master/infra/templates/osdu-r3-mvp/data_partition/override.tfvars -O $FILE_SHARE/partition.tfvars
            wget https://community.opengroup.org/osdu/platform/deployment-and-operations/infra-azure-provisioning/-/raw/master/infra/templates/osdu-r3-mvp/service_resources/override.tfvars -O $FILE_SHARE/service.tfvars
            STORAGE=$(az storage account list --resource-group $RESOURCE_GROUP --query [].name -otsv)
            STORAGE_KEY=$(az storage account keys list --account-name $STORAGE --resource-group $RESOURCE_GROUP --query '[0].value' -otsv)
            az storage file upload-batch --account-name $STORAGE --account-key $STORAGE_KEY --destination $FILE_SHARE --source $FILE_SHARE --pattern "**"
            rm -rf $FILE_SHARE

      - name: Save Infrastructure Environment to Vault
        uses: Azure/cli@1.0.4
        env:
          FILE_SHARE: configuration
        with:
          azcliversion: ${{ env.CLI_VERSION }}
          inlineScript: |
            VAULT=$(az keyvault list --resource-group $RESOURCE_GROUP --query [].name -otsv)
            cat > envrc << EOF
            ## These variables support AzureRM Backend Storage State
            export ARM_TENANT_ID="$(az account show --query homeTenantId -otsv)"
            export ARM_SUBSCRIPTION_ID="$(az account show --query id -otsv)"
            export ARM_CLIENT_ID="$(az keyvault secret show --id https://$VAULT.vault.azure.net/secrets/terraform-id --query value -otsv)"
            export ARM_CLIENT_SECRET="$(az keyvault secret show --id https://$VAULT.vault.azure.net/secrets/terraform-secret --query value -otsv)"
            export ARM_ACCESS_KEY="$(az keyvault secret show --id https://$VAULT.vault.azure.net/secrets/storage-key --query value -otsv)"
            export TF_VAR_remote_state_account="$(az keyvault secret show --id https://$VAULT.vault.azure.net/secrets/storage --query value -otsv)"
            export TF_VAR_remote_state_container="remote-state-container"

            ## These variables support creating the infrastructure
            # Global Region Pair Location
            export TF_VAR_cosmosdb_replica_location="$(az account list-locations --query "[?name == '${{ secrets.AZURE_LOCATION }}'].metadata.pairedRegion[0].name" -otsv)"

            # Central Resources
            export TF_VAR_principal_appId="$(az keyvault secret show --id https://$VAULT.vault.azure.net/secrets/client-id --query value -otsv)"
            export TF_VAR_principal_name="$principalName"
            export TF_VAR_principal_password="$(az keyvault secret show --id https://$VAULT.vault.azure.net/secrets/client-secret --query value -otsv)"
            export TF_VAR_principal_objectId="$(az keyvault secret show --id https://$VAULT.vault.azure.net/secrets/client-oid --query value -otsv)"
            export TF_VAR_aad_client_id="$(az keyvault secret show --id https://$VAULT.vault.azure.net/secrets/application-id --query value -otsv)"

            # Data Partition
            export TF_VAR_elasticsearch_endpoint="${{ secrets.ELASTIC_ENDPOINT }}"
            export TF_VAR_elasticsearch_username="elastic"
            export TF_VAR_elasticsearch_password="${{ secrets.ELASTIC_PASSWORD }}"

            # Service Resources
            export TF_VAR_gitops_ssh_url="git@github.com/$GITHUB_REPOSITORY.git"
            export TF_VAR_ssh_public_key_file="/osdu-azure/.ssh/azure-aks-node-ssh-key.pub"
            export TF_VAR_gitops_ssh_key_file="/osdu-azure/.ssh/azure-aks-gitops-ssh-key"
            EOF
            az keyvault secret set --vault-name $VAULT --name "envrc" --file envrc
